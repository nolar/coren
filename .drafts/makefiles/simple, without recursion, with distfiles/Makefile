#################################################################################
#										#
# COREN (a) nolar@numeri.net							#
# Главный makefile всего проекта.						#
#										#
#										#
# Для выполнения команд требуется шелл sh, а также ряд базовых команд (cp,	#
# rm, mv...). Сам makefile работает только в GNU make.				#
# Шелл, команды и GNU make входят в MSYS (http://www.mingw.org/msys.shtml).	#
#										#
# Цели (goals), доступные для make, деляется на две категории: те, которые	#
# можно вызывать только в главном каталоге проекта, и те, которые можно		#
# вызывать как в главном каталоге, так и в каталогах с исходными кодами.	#
# Тем не менее, цели из второй категории (везде доступные) отличаются друг от	#
# друга в зависимости от того, где они были вызваны. Все цели, вызванные	#
# внутри каталогов с исходным кодом, выполняют действие только в этом каталоге,	#
# не осуществляя рекурсивный спуск по подкаталогам. Одноименные цели, вызванные	#
# из главного каталога проекта, кроме своих собственных действий еще и обходят	#
# все каталоги с исходными кодами и вызывают запроенные цели в каждом таком	#
# каталоге. Таким образом, будучи вызванной из главного каталога, эта цель	#
# выполняется целиком для всего проекта.					#
#										#
# Следует отметить также, что в каталогах с исходным кодом любые цели доступны	#
# только если выполнена генерация makefile'ов для этих каталогов (см. цель	#
# makefiles). Пока генерация не выполнена, makefile отсутствует, и выполнять	#
# просто нечего. При выполнении целей главного каталога, которые рекурсивно	#
# проходят по каталогам с исходными кодами, эта цель автоматически выполнится	#
# перед обходом. Если это не разновидность clean, то исполнение такой цели	#
# оставит за собой makefile в каждом каталоге с исходными кодами.		#
#										#
# При разработке, в каталогах с исходными кодами можно создавать файлы		#
# makefile.local, которые читаются при выполнении любых целей в этих каталогах.	#
# В них можно задать дополнительные действия, которые выполняются до и после	#
# выполнения основного действия цели. Для этого нужно определить правило с	#
# именем pre-XXX или post-XXX, где XXX - это имя цели, для которой нужно задать	#
# дополнительные действия. Переопределять другие действия, такие как		#
# all, XXX, do-XXX, не нужно, а точнее нельзя. В то же время, можно создать	#
# свои дополнительные правила, которых нет в основных makefile'ах. Главное -	#
# чтобы их названия не использовались нигде в другом месте.			#
#										#
# Также в файлах makefile.local можно задавать или переопределять значения	#
# переменных основного файла, если в этом есть необходимость. В них же должны	#
# задаваться списки дистрибутивных файлов этого каталога, то есть те файлы,	#
# которые не будут удалены при выполнении цели distclean. Внимание! В файлах	#
# makefile.local список дистрибутивных файлов всегда задавайте через "+=",	#
# а не "="/":=", чтобы не сбросить уже заданные элементы списка. Не забывайте	#
# включать в список дистрибутивных файлов также и названия подкаталогов,	#
# иначе они будут стерты еще до того, как начнется их проверка.			#
#										#
# В makefile.local доступны две дополнительные переменные, которые не заданы	#
# в конфигурационном или общем makefile'ах. Это rootpath и herepath.		#
# Переменная rootpath указывает относительный путь от каталога с исходными	#
# кодами до корневого каталога проекта; состоит из нескольких "..", и всегда	#
# оканчивается на "/". Переменная herepath указывает относительный путь от	#
# корневого каталога проекта до каталога с исходными кодами, в котором		#
# расположен данный makefile.local; состоит из нескольких имен папок и всегда	#
# заканчивается на "/". Конструкция $(rootpath)$(herepath)file всегда указывает	#
# на файл с именем file, находящийся в каталоге makefile.local'а.		#
#										#
#										#
# Доступные цели:								#
#										#
# all										#
#	Как в главном каталоге, так и в каталоге с исходными кодами, это	#
#	функциональный синоним для build, а также цель по умолчанию		#
#	(то есть если в командной строке цель явно не указана).			#
#										#
# makefiles									#
#	Создает во всех каталогов с исходным кодом makefile'ы, которые		#
#	ссылаются на makefile.subdirs в корневом каталоге проекта.		#
#	Созданные таким образом файлы удобно использовать для выполнения	#
#	команды make прямо в дочернем каталоге, причем работа выполняется	#
#	только для файлов и зависимостей этого каталога, без рекурсивного	#
#	обхода дочерних или родительских каталогов.				#
#	Эта цель доступна только в главном каталоге проекта; в каталогах	#
#	с исходным кодом она отсутствует.					#
#										#
# clean										#
#	Если цель вызвана в любом каталоге с исходным кодом, то очищает этот	#
#	каталог от файлов, которые генерируются при выполнении цели build.	#
#	Никакие другие файлы, в том числе создаваемые другими целями, либо	#
#	созданные вручную, не трогаются.					#
#	Если цель вызвана в главном каталоге проекта, то выполняет эту же цель	#
#	в каждом подкаталоге с исходным кодом, рекурсивно вызывая make.		#
#										#
# veryclean									#
#	Если цель вызвана в любом каталоге с исходным кодом, то очищает этот	#
#	каталог от файлов, которые генерируются при выполнении цели build,	# 									#
#	а также от всех файлов, которые подпадают под определение мусорных	#
#	(задается в конфигурационных переменных): резервные копии и т.п.	#
#	Если цель вызвана в главном каталоге проекта, то выполняет эту же цель	#
#	в каждом подкаталоге с исходным кодом, рекурсивно вызывая make.		#
#										#
# distclean									#
#	Если цель вызвана в любом каталоге с исходным кодом, то очищает этот	#
#	каталог от файлов, которые не помечены как дистрибутивные; то есть	#
#	от тех файлов, которые тем или иным способом генерируются при		#
#	выполнении любой цели, которые подпадают под определение мусорных, и	#
#	которые созданны вручную. Это подразумевает и удаление автосозданного	#
#	makefile'а этого каталога (см. цель makefiles), то есть самого себя.	#
#	Будьте внимательны. После выполнения этого действия в каталоге с	#
#	исходным кодом любые другие цели не будут выполняться, так как makefile	#
#	будет уже уничтожен. Потребуется заново вызывать цель makefiles из	#
#	главного каталога проекта, чтобы все заработало.			#
#	Чтобы определенный файл не удалялся при выполнении этой цели, нужно	#
#	занести его имя (или маску имен) в переменную ... в makefile.local.	#
#	Если цель вызвана в главном каталоге проекта, то выполняет эту же цель	#
#	в каждом подкаталоге с исходным кодом, рекурсивно вызывая make.		#
#										#
# build										#
#	Если цель вызвана в любом каталоге с исходным кодом, то компилирует	#
#	и компонует все файлы в этом каталоге, которые хоть как-то можно	#
#	компилировать и компоновать.						#
#	Если цель вызвана в главном каталоге проекта, то выполняет эту же цель	#
#	в каждом подкаталоге с исходным кодом, рекурсивно вызывая make.		#
#										#
# install									#
#	Если цель вызвана в любом каталоге с исходным кодом, то устанавливает	#
#	файлы в целевой каталог, предварительно скомпилировав и скомпоновав их	#
#	(см. цель build). Целевой каталог задается в конфигурации.		#
#	Если цель вызвана в главном каталоге проекта, то выполняет эту же цель	#
#	в каждом подкаталоге с исходным кодом, рекурсивно вызывая make.		#
#										#
# tar/tgz/rar/zip/...								#
#	TODO:									#
#	По задумке, должна сделать архив из установленной копии проекта (см	#
#	цель install), даже если в установленную копию были внесены изменения,	#
#	которых нет в исходном коде; например, конфиги сайта.			#
#										#
# upload									#
#	TODO:									#
#	По задумке, должен загрузить установленную копию на ftp-сервер.		#
#										#
# siteoff/siteon								#
#	TODO:									#
#	По задумке, должны выполнить отключение/включение сайта с выводом	#
#	специального уведомления о том, что сайт отключен (через mod_rewrite).	#
#										#
#################################################################################
#################################################################################
#										#
# COREN (a) nolar@numeri.net							#
# Конфигурационный makefile проекта.						#
#										#
#										#
# Здесь описаны только конфигурационные параметры и их назначение.		#
# Описания доступных целей см. в файле makefile в корневом каталоге проекта.	#
#										#
#################################################################################
#
# Очень важно чтобы шеллом был sh/bash. Без него не будут работать команды
# практически всех целей, которые разработаны и сильно оптимизированы именно
# под sh. Windows'овский cmd.exe/command.com не подходит!
#
SHELL = /bin/sh
#
# Команды работы с файлами, понятные шеллу (которые он может выполнить/вызвать).
#
RM      ?= rm -f
CP      ?= cp
MV      ?= mv
INSTALL ?= install
#
# Команда для вызова php (cgi или cli). При необходимости, укажите полный путь.
#
PHP ?= php
#
# Каталог, в котором будут установлены итоговые файлы (см. цель install).
# Каталог, при необходимости, будет создан.
#
#??? dstdir ?= dst/
#
#################################################################################
#
# Список масок для файлов, которые считаются мусорными (см. цель veryclean).
#
trash = %- %~ %.bak
#
#################################################################################
#################################################################################
#################################################################################
#
# Определяем цель по умолчанию, которая будет выполнена, если при вызове make
# иная цель не была указана явно (через параметр).
#
all: build
#
#################################################################################
#
# Определяем базовые цели, которые могут вызываться рекурсивно для подкаталогов.
# Этот список не конфигурируемый, так как набор целей строго определен и описан
# в документации (комментариях).
#
###recursivegoals := clean veryclean distclean build install
#
# Формируем списки целей, которые выполняются как этапы достижения общей цели
# (из тех, что выполняются во всей иерархии).
#
###recursivegoals_pre  := $(addprefix  pre-,$(recursivegoals))
###recursivegoals_do   := $(addprefix   do-,$(recursivegoals))
###recursivegoals_post := $(addprefix post-,$(recursivegoals))
#
# Выстраиваем взаимные зависимости рекурсивных целей, причем такие, чтобы
# они всегда выполнялись в порядке pre->do->post->goal, даже если включено
# параллельное выполнение целей (make --jobs).
#
###$(recursivegoals_pre)  :  pre-% :
###$(recursivegoals_do)   :   do-% :  pre-%
###$(recursivegoals_post) : post-% :   do-%
###$(recursivegoals)      :      % : post-%
#
# Помечаем все рекурсивные цели и их производные как phony.
# Так же помечаем и цель по умолчанию (all).
#
###.PHONY: \
###	$(recursivegoals_pre)  \
###	$(recursivegoals_do)   \
###	$(recursivegoals_post) \
###	$(recursivegoals)      \
###	all
#
#################################################################################
#
# Задаем правила компиляции phps-файлов методом урезания из них все комментариев
# и упаковки их в более компактную и менее читабельную форму.
#
%.php : %.phps
	$(PHP) -w $< > $@
#
#
#################################################################################
#################################################################################
#################################################################################
#
# Собираем имена всех подкаталогов в папке исходных кодов, начиная от ее корня,
# и до уровня вложенности 10. Если требуется еще глубже - допишите маски.
# Путь к папке, в которой лежат исходные коды, задается переменной srcdir.
# Этот список используется во многих командах для обхода дочерних каталогов.
#
realfiles00 := ./
realfiles01 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles00))) $(addsuffix .*/,$(filter %/,$(realfiles00))) ))
realfiles02 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles01))) $(addsuffix .*/,$(filter %/,$(realfiles01))) ))
realfiles03 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles02))) $(addsuffix .*/,$(filter %/,$(realfiles02))) ))
realfiles04 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles03))) $(addsuffix .*/,$(filter %/,$(realfiles03))) ))
realfiles05 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles04))) $(addsuffix .*/,$(filter %/,$(realfiles04))) ))
realfiles06 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles05))) $(addsuffix .*/,$(filter %/,$(realfiles05))) ))
realfiles07 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles06))) $(addsuffix .*/,$(filter %/,$(realfiles06))) ))
realfiles08 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles07))) $(addsuffix .*/,$(filter %/,$(realfiles07))) ))
realfiles09 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles08))) $(addsuffix .*/,$(filter %/,$(realfiles08))) ))
realfiles10 := $(filter-out %/./ %/../,$(wildcard $(addsuffix */,$(filter %/,$(realfiles09))) $(addsuffix .*/,$(filter %/,$(realfiles09))) ))
realfiles := $(sort $(patsubst ./%,%,$(foreach index,01 02 03 04 05 06 07 08 09 10,$(realfiles$(index)))))
#
#################################################################################
#
#
#
.PHONY: files
files:
	echo "override distfiles = $(realfiles)" > Makefile.files
#
#################################################################################
#
#
#
ifneq (,$(wildcard Makefile.files))
include Makefile.files
override distfiles := $(sort $(distfiles))
else
override distfiles :=
endif
#
#################################################################################
#
#
#
ifeq (,$(distfiles))
%:
	@ { \
		echo "Sorry, but there is no list of distributed files. Can't do '$@'." ; \
		echo "You have to repair 'Makefile.files' either by calling 'make files'" ; \
		echo "(this target will work), or by retrieving that file from original archive." ; \
	}
else
#
#################################################################################
#
# Вычисление списков файлов разного типа и назначения.
#
# phpsourcefiles - phps-файлы, предусмотренные дистрибутивом (даже если их нет).
# phptargetfiles - соответствующие им имена php-файлов (даже если их тоже нет).
# phpactualfiles - все существующие php-файлы, для которых есть исходный phps.
# phporphanfiles - все существующие php-файлы, для которых нет исходного phps.
# trashablefiles - все существующие файлы, сочтенные мусорными.
# outofdistfiles - все существующие файлы, сочтенные не-дистрибутивными.
# alltargetfiles - все файлы, которые компилируются из других файлов (даже если их нет).
#
phpsourcefiles := $(filter %.phps,$(distfiles))
phptargetfiles := $(patsubst %.phps,%.php,$(phpsourcefiles))
phpactualfiles := $(filter     $(phptargetfiles),$(realfiles))
phporphanfiles := $(filter-out $(phptargetfiles),$(realfiles))
trashablefiles := $(filter     $(trash)    ,$(realfiles))
outofdistfiles := $(filter-out $(distfiles),$(realfiles))
alltargetfiles := $(phptargetfiles)
#
#################################################################################
#
clean:
	-$(RM) -- $(alltargetfiles)
#
#################################################################################
#
veryclean:
	-$(RM) -- $(alltargetfiles) $(trashablefiles)
#
#################################################################################
#
distclean:
	-$(RM) -r -- $(outofdistfiles)
#
#################################################################################
#
build: $(alltargetfiles)
#
#################################################################################
#
# todo later
#
install: build
#
#################################################################################
#
# todo later.
#
tar: install
tgz: install
rar: install
zip: install
#
#################################################################################
#
.PHONY: clean veryclean distclean build install tar tgz rar zip
#
#################################################################################
#
endif
#
#################################################################################
# FIN.										#
#################################################################################

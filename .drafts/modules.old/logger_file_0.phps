<?php defined('CORENINPAGE') or die('Hack!');
//todo: 1. конфиг includes, excludes, чтобы фильтровать по идентификатору, и протоколировать не все, а только нужные коды

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class logger_file_0 extends module
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protected $path;
protected $umask;
protected $autocreate;

protected $handle;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function __construct ($configs)
{
	parent::__construct($configs);

	$this->path       = isset($configs['path'      ]) ? $configs['path'      ] : null;
	$this->umask      = isset($configs['umask'     ]) ? $configs['umask'     ] : null;
	$this->autocreate = isset($configs['autocreate']) ? $configs['autocreate'] : null;

	if (!isset($this->path)) throw new exception('misconfig_path');
	else $this->path = core::normalize_path($this->path, SITEPATH);

	$this->handle = null;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public function core_init ($args)
{
	// Open file if it exists or create new one if autocreation is enabled.
	if ($this->autocreate || file_exists($this->path))
	{
		$newmask = octdec(ltrim($this->umask, ' 0'));
		$oldmask = umask($newmask);
		$this->handle = @fopen($this->path, 'at');
		umask($oldmask);

		if ($this->handle === false)
		{
			$this->handle = null;
			throw new exception("Can not log to file '{$this->path}'" . (isset($php_errormsg) ? ": {$php_errormsg}" : "") . ".");
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public function core_stop ($args)
{
	if (!is_null($this->handle))
	{
		fclose($this->handle);
		$this->handle = null;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public function core_event ($args)
{
	if (!is_null($this->handle))
	{
		$timestamp = date("Y-m-d H:i:s O");
		fwrite($this->handle,
			      "[" . $timestamp . "]" .
			" " . "[" . sprintf("%15s", $_SERVER['REMOTE_ADDR']) . "]" .
			" " . SELFFILE .
			" " . $args['executor'] . "::" . $args['module'] . "::" . $args['method'] . "()" .
			" " . "<"  . $args['identifier'] . ">" .
			" " . $args['message'] .
			"\n");
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

?>